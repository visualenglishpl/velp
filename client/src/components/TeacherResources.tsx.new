import React, { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { Trash, Plus, Edit, Save, X, Upload, Video, Gamepad2, BookOpen, Link, ExternalLink, FileText, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Card } from '@/components/ui/card';

interface TeacherResource {
  id?: number;
  bookId: string;
  unitId: string;
  title: string;
  resourceType: 'video' | 'game' | 'activity' | 'pdf' | 'other';
  embedCode: string;
  provider?: string;
  sourceUrl?: string;
  order: number;
}

interface TeacherResourcesProps {
  bookId?: string;
  unitId?: string;
  isEditMode?: boolean;
}

const TeacherResources: React.FC<TeacherResourcesProps> = ({ 
  bookId, 
  unitId, 
  isEditMode = false 
}) => {
  const [resources, setResources] = useState<TeacherResource[]>([]);
  const [newResource, setNewResource] = useState<Partial<TeacherResource>>({
    resourceType: 'video',
    title: '',
    embedCode: '',
    provider: '',
    sourceUrl: ''
  });
  const [isAdding, setIsAdding] = useState(false);
  const [editingResource, setEditingResource] = useState<number | null>(null);
  const { toast } = useToast();

  // Load resources from localStorage
  useEffect(() => {
    if (bookId && unitId) {
      const savedResources = localStorage.getItem(`resources-${bookId}-${unitId}`);
      if (savedResources) {
        try {
          const parsed = JSON.parse(savedResources);
          if (Array.isArray(parsed)) {
            setResources(parsed);
          }
        } catch (error) {
          console.error('Error parsing saved resources:', error);
        }
      }
    }
  }, [bookId, unitId]);
  
  // Add pre-defined resources for Book 1, Unit 1 and Book 0b, Unit 1
  useEffect(() => {
    if (resources.length === 0 && bookId && unitId) {
      let predefinedResources: TeacherResource[] = [];
      
      // Book 0b, Unit 1 resources
      if (bookId === "0b" && unitId === "1") {
        predefinedResources = [
          {
            bookId: "0b",
            unitId: "1",
            title: "Good Morning, Good Night - LITTLE FOX",
            resourceType: "video",
            embedCode: '<iframe width="560" height="315" src="https://www.youtube.com/embed/7CuZr1Dz3sk?si=xjDrz_iryoabkZjn" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>',
            order: 0,
            provider: "YouTube"
          }
        ];
        setResources(predefinedResources);
      } 
      // Book 1, Unit 1 resources
      else if (bookId === "1" && unitId === "1") {
        predefinedResources = [
          // Videos
          {
            bookId: "1",
            unitId: "1",
            title: "Good Morning - PINKFONG",
            resourceType: "video",
            embedCode: '<iframe width="560" height="315" src="https://www.youtube.com/embed/7CuZr1Dz3sk?si=8rsR-SrYgJ8GhGSf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>',
            order: 0,
            provider: "YouTube"
          },
          {
            bookId: "1",
            unitId: "1",
            title: "Good Morning, Good Night - LITTLE FOX",
            resourceType: "video",
            embedCode: '<iframe width="560" height="315" src="https://www.youtube.com/embed/mebfKDQ4dLo?si=YT-l31BE-4hvjN8m" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>',
            order: 1,
            provider: "YouTube"
          },
          {
            bookId: "1",
            unitId: "1",
            title: "The Greetings Song - MAPLE LEAF",
            resourceType: "video",
            embedCode: '<iframe width="560" height="315" src="https://www.youtube.com/embed/gVIFEVLzP4o?si=7yhM78fH9pFHwlgD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>',
            order: 2,
            provider: "YouTube"
          },
          {
            bookId: "1",
            unitId: "1",
            title: "Hello! - Super Simple Songs",
            resourceType: "video",
            embedCode: '<iframe width="560" height="315" src="https://www.youtube.com/embed/tVlcKp3bWH8?si=Z_LsC0kU3mC3KZDA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>',
            order: 3,
            provider: "YouTube"
          },
          // Games
          {
            bookId: "1",
            unitId: "1",
            title: "Greetings Game - Wordwall",
            resourceType: "game",
            embedCode: '<iframe style="max-width:100%" src="https://wordwall.net/embed/7a5f9c9d02764745b1b471a56483ddf2?themeId=1&templateId=46&fontStackId=0" width="500" height="380" frameborder="0" allowfullscreen></iframe>',
            order: 4,
            provider: "Wordwall"
          },
          {
            bookId: "1",
            unitId: "1",
            title: "Times of the Day Game - Wordwall",
            resourceType: "game",
            embedCode: '<iframe style="max-width:100%" src="https://wordwall.net/embed/aa9083a0802940d7abd8dfbb0ea2113d?themeId=1&templateId=2&fontStackId=0" width="500" height="380" frameborder="0" allowfullscreen></iframe>',
            order: 5,
            provider: "Wordwall"
          },
          {
            bookId: "1",
            unitId: "1",
            title: "Greetings Match-Up - Wordwall",
            resourceType: "game",
            embedCode: '<iframe style="max-width:100%" src="https://wordwall.net/embed/7a5f9c9d02764745b1b471a56483ddf2?themeId=1&templateId=2&fontStackId=0" width="500" height="380" frameborder="0" allowfullscreen></iframe>',
            order: 6,
            provider: "Wordwall"
          },
          // Lesson Plans
          {
            bookId: "1",
            unitId: "1",
            title: "Lesson Plan - Greetings and Times of Day (2 x 45min)",
            resourceType: "activity",
            embedCode: `<div style="padding: 20px; background-color: white; border-radius: 8px; border: 1px solid #e2e8f0; max-width: 1200px; margin: 0 auto;">
            <h2 style="font-size: 1.8rem; color: #2563eb; margin-bottom: 1.5rem; text-align: center; border-bottom: 3px solid #e2e8f0; padding-bottom: 12px;">Comprehensive Lesson Plan: Greetings and Times of Day (2 x 45min)</h2>
            
            <div style="margin-bottom: 1.8rem; background-color: #f8fafc; padding: 20px; border-radius: 8px; border-left: 6px solid #3b82f6;">
              <h3 style="font-size: 1.4rem; color: #1e40af; margin-bottom: 0.8rem;">Lesson Overview</h3>
              <p style="font-size: 1.1rem; line-height: 1.6;">This comprehensive plan covers two 45-minute lessons focusing on greetings and times of day vocabulary and expressions. The activities are designed to engage students through multiple learning styles and provide practical conversation practice.</p>
            </div>
            
            <!-- Two-column layout for learning objectives and materials -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 30px; margin-bottom: 2rem;">
              <div style="background-color: #f0f9ff; padding: 20px; border-radius: 8px; border: 1px solid #bfdbfe;">
                <h3 style="font-size: 1.3rem; color: #0369a1; border-bottom: 2px solid #bfdbfe; padding-bottom: 10px; margin-bottom: 15px;">Learning Objectives</h3>
                <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.7;">
                  <li>Students will identify and use greetings appropriate for different times of day</li>
                  <li>Students will practice time-related vocabulary (morning, afternoon, evening, night)</li>
                  <li>Students will demonstrate understanding through role-play and interactive activities</li>
                  <li>Students will create their own greeting dialogues for different scenarios</li>
                </ul>
              </div>
              
              <div style="background-color: #f0fdf4; padding: 20px; border-radius: 8px; border: 1px solid #bbf7d0;">
                <h3 style="font-size: 1.3rem; color: #166534; border-bottom: 2px solid #bbf7d0; padding-bottom: 10px; margin-bottom: 15px;">Required Materials</h3>
                <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.7;">
                  <li>Visual English Book 1 - Unit 1 slides (Greetings section)</li>
                  <li>Time of day flashcards with images showing different times</li>
                  <li>Role-play situation cards (different times and settings)</li>
                  <li>Craft materials: colored paper, markers, scissors, glue</li>
                  <li>Clock face templates</li>
                  <li>Printed greetings for a matching activity</li>
                </ul>
              </div>
            </div>
            
            <!-- Two-column layout for lesson plans -->
            <div style="margin-bottom: 2rem;">
              <h3 style="font-size: 1.5rem; color: #4b5563; text-align: center; margin-bottom: 1.2rem; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">Detailed Lesson Plans</h3>
              
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); gap: 30px;">
                <!-- Lesson 1 -->
                <div style="background-color: #f0f9ff; padding: 25px; border-radius: 12px; border: 1px solid #bfdbfe;">
                  <h3 style="font-size: 1.4rem; color: #0369a1; margin-bottom: 1.2rem; text-align: center; border-bottom: 2px solid #bfdbfe; padding-bottom: 10px;">Lesson 1: Greetings Basics (45 minutes)</h3>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #0ea5e9; margin-bottom: 0.6rem; border-bottom: 1px solid #bfdbfe; padding-bottom: 5px;">Warm-up (5 minutes)</h4>
                    <p style="font-size: 1.05rem; line-height: 1.6;">Greet students as they enter with various greetings based on the current time. Have students respond with an appropriate greeting. Ask students what time of day it is and which greetings are appropriate now.</p>
                  </div>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #0ea5e9; margin-bottom: 0.6rem; border-bottom: 1px solid #bfdbfe; padding-bottom: 5px;">Presentation (15 minutes)</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Show slides 1-10 with different greetings and times of day</li>
                      <li>Model pronunciation and have students repeat each greeting</li>
                      <li>Demonstrate greeting dialogues with a student volunteer</li>
                      <li>Explain when each greeting is appropriate using visual time cues</li>
                    </ul>
                  </div>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #0ea5e9; margin-bottom: 0.6rem; border-bottom: 1px solid #bfdbfe; padding-bottom: 5px;">Practice (15 minutes)</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Show time flashcards and have students call out appropriate greetings</li>
                      <li>Pair activity: Students practice greetings dialogues with partners</li>
                      <li>Matching game: Match greetings to appropriate times of day</li>
                      <li>Chain greeting: Students form a circle and greet the next person with a different greeting</li>
                    </ul>
                  </div>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #0ea5e9; margin-bottom: 0.6rem; border-bottom: 1px solid #bfdbfe; padding-bottom: 5px;">Production (10 minutes)</h4>
                    <p style="font-size: 1.05rem; line-height: 1.6;">Role-play activity: Students work in pairs with time scenario cards. Each pair creates and performs a short greeting dialogue appropriate for their assigned time of day.</p>
                  </div>
                  
                  <div style="background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #0ea5e9; margin-bottom: 0.6rem; border-bottom: 1px solid #bfdbfe; padding-bottom: 5px;">Wrap-up & Assessment (5 minutes)</h4>
                    <p style="font-size: 1.05rem; line-height: 1.6;">Quick review of the greetings learned. Students complete a short self-assessment checklist about which greetings they feel confident using.</p>
                  </div>
                </div>
                
                <!-- Lesson 2 -->
                <div style="background-color: #fff7ed; padding: 25px; border-radius: 12px; border: 1px solid #fed7aa;">
                  <h3 style="font-size: 1.4rem; color: #9a3412; margin-bottom: 1.2rem; text-align: center; border-bottom: 2px solid #fed7aa; padding-bottom: 10px;">Lesson 2: Creative Applications (45 minutes)</h3>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #ea580c; margin-bottom: 0.6rem; border-bottom: 1px solid #fed7aa; padding-bottom: 5px;">Warm-up & Review (8 minutes)</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Greeting song: Play the "Good Morning" video and have students sing along</li>
                      <li>Quick review game: Teacher shows times on a clock, students say the appropriate greeting</li>
                    </ul>
                  </div>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #ea580c; margin-bottom: 0.6rem; border-bottom: 1px solid #fed7aa; padding-bottom: 5px;">Creative Craft Activity (15 minutes)</h4>
                    <p style="font-size: 1.05rem; line-height: 1.6; margin-bottom: 10px;"><strong>Time-of-Day Greeting Wheels:</strong> Students create interactive wheels with different times of day and matching greetings:</p>
                    <ol style="list-style-type: decimal; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Give each student two circles of cardboard/paper</li>
                      <li>On the bottom circle, students draw/write the four times of day</li>
                      <li>On the top circle (with a section cut out), students write matching greetings</li>
                      <li>Connect the circles with a paper fastener so the top wheel rotates</li>
                      <li>Students can decorate their wheels with appropriate time symbols</li>
                    </ol>
                  </div>
                  
                  <div style="margin-bottom: 1.2rem; background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #ea580c; margin-bottom: 0.6rem; border-bottom: 1px solid #fed7aa; padding-bottom: 5px;">Interactive Game (12 minutes)</h4>
                    <p style="font-size: 1.05rem; line-height: 1.6; margin-bottom: 10px;"><strong>Greeting Detectives:</strong> A fun movement activity to practice greetings:</p>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Students move around the classroom</li>
                      <li>Teacher calls out a time of day</li>
                      <li>Students must find a partner and exchange appropriate greetings</li>
                      <li>Students who use incorrect greetings sit down</li>
                      <li>Last students standing are the "Greeting Detectives"</li>
                    </ul>
                  </div>
                  
                  <div style="background-color: rgba(255,255,255,0.5); padding: 15px; border-radius: 8px;">
                    <h4 style="font-size: 1.2rem; color: #ea580c; margin-bottom: 0.6rem; border-bottom: 1px solid #fed7aa; padding-bottom: 5px;">Digital Extension & Closing (10 minutes)</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.6;">
                      <li>Play the Wordwall Greetings game as a class competition</li>
                      <li>Students take turns answering questions</li>
                      <li>Award small prizes for correct answers</li>
                      <li>Final review of all greetings and when to use them</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Two-column layout for additional ideas and assessment -->
            <div style="margin-top: 2rem;">
              <h3 style="font-size: 1.5rem; color: #4b5563; text-align: center; margin-bottom: 1.2rem; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">Supporting Resources</h3>
              
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 30px;">
                <div style="background-color: #faf5ff; padding: 20px; border-radius: 8px; border: 1px solid #e9d5ff;">
                  <h3 style="font-size: 1.3rem; color: #6b21a8; border-bottom: 2px solid #e9d5ff; padding-bottom: 10px; margin-bottom: 15px;">Additional Games & Craft Ideas</h3>
                  <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.7;">
                    <li><strong>Greeting Bingo:</strong> Create bingo cards with different greetings. Teacher shows a time of day, students mark the appropriate greeting.</li>
                    <li><strong>Time Freeze:</strong> Play music, when it stops, teacher shows a clock time and students must quickly find a partner and exchange appropriate greetings.</li>
                    <li><strong>Greeting Puppets:</strong> Students create simple stick puppets with different characters and practice greetings dialogues using them.</li>
                    <li><strong>Around the World:</strong> Show images of people from different countries greeting each other at different times of day.</li>
                  </ul>
                </div>
                
                <div style="background-color: #fef2f2; padding: 20px; border-radius: 8px; border: 1px solid #fecaca;">
                  <h3 style="font-size: 1.3rem; color: #991b1b; border-bottom: 2px solid #fecaca; padding-bottom: 10px; margin-bottom: 15px;">Assessment & Differentiation</h3>
                  <div style="margin-bottom: 1.2rem;">
                    <h4 style="font-size: 1.2rem; color: #b91c1c; margin-bottom: 0.6rem; border-bottom: 1px solid #fecaca; padding-bottom: 5px;">Assessment</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.7;">
                      <li><strong>Formative:</strong> Teacher observation during activities, checking for correct greeting usage</li>
                      <li><strong>Summative:</strong> Role-play performance, greeting wheel completion, participation in games</li>
                      <li><strong>Self-assessment:</strong> Students indicate which greetings they can use confidently</li>
                    </ul>
                  </div>
                  
                  <div>
                    <h4 style="font-size: 1.2rem; color: #b91c1c; margin-bottom: 0.6rem; border-bottom: 1px solid #fecaca; padding-bottom: 5px;">Differentiation</h4>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; font-size: 1.05rem; line-height: 1.7;">
                      <li><strong>Support:</strong> Provide visual cue cards, simplified dialogues, partner with stronger students</li>
                      <li><strong>Extension:</strong> Create more complex dialogues, add follow-up questions, teach cultural variations of greetings</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>`,
            order: 7,
            provider: "Lesson Plan"
          },
          // PDFs
          {
            bookId: "1",
            unitId: "1",
            title: "Unit 1 Lesson Plan (PDF)",
            resourceType: "pdf",
            embedCode: 'PDF not available for preview. Click the download button to view.',
            sourceUrl: '/api/direct/file/book1/unit1/00 A Visual English 1 – Unit 1 – New Version.pdf',
            order: 8,
            provider: "Visual English"
          }
        ];
        setResources(predefinedResources);
      }
      
      // Save to localStorage
      if (predefinedResources.length > 0) {
        localStorage.setItem(`resources-${bookId}-${unitId}`, JSON.stringify(predefinedResources));
      }
    }
  }, [resources.length, bookId, unitId]);

  // Handle adding a new resource
  const handleAddResource = () => {
    if (!bookId || !unitId || !newResource.title || !newResource.embedCode) {
      toast({
        title: "Incomplete resource",
        description: "Please fill in all required fields.",
        variant: "destructive",
      });
      return;
    }
    
    const resourceToAdd: TeacherResource = {
      bookId,
      unitId,
      title: newResource.title || '',
      resourceType: newResource.resourceType as TeacherResource['resourceType'] || 'video',
      embedCode: newResource.embedCode || '',
      provider: newResource.provider || '',
      sourceUrl: newResource.sourceUrl || '',
      order: resources.length,
    };
    
    // If PDF, add a direct link
    if (resourceToAdd.resourceType === 'pdf' && resourceToAdd.sourceUrl) {
      // Special handling for PDF resources
      const pdfResource: TeacherResource = {
        ...resourceToAdd,
        embedCode: 'PDF not available for preview. Click the download button to view.'
      };
      
      const newResources = [...resources, pdfResource];
      setResources(newResources);
      localStorage.setItem(`resources-${bookId}-${unitId}`, JSON.stringify(newResources));
      
      toast({
        title: "PDF Resource Added",
        description: "The PDF resource has been added successfully.",
      });
    } else {
      // Standard resource addition
      const newResources = [...resources, resourceToAdd];
      setResources(newResources);
      localStorage.setItem(`resources-${bookId}-${unitId}`, JSON.stringify(newResources));
      
      toast({
        title: "Resource Added",
        description: "The resource has been added successfully.",
      });
    }
    
    setIsAdding(false);
    setNewResource({
      resourceType: 'video',
      title: '',
      embedCode: '',
      provider: '',
      sourceUrl: ''
    });
  };

  // Handle updating a resource
  const handleUpdateResource = (index: number) => {
    const updatedResources = [...resources];
    localStorage.setItem(`resources-${bookId}-${unitId}`, JSON.stringify(updatedResources));
    
    toast({
      title: "Resource Updated",
      description: "The resource has been updated successfully.",
    });
    
    setEditingResource(null);
  };

  // Handle deleting a resource
  const handleDeleteResource = (index: number) => {
    const updatedResources = resources.filter((_, i) => i !== index);
    setResources(updatedResources);
    localStorage.setItem(`resources-${bookId}-${unitId}`, JSON.stringify(updatedResources));
    
    toast({
      title: "Resource Deleted",
      description: "The resource has been removed successfully.",
    });
  };

  // Cancel adding a new resource
  const handleCancelAdd = () => {
    setIsAdding(false);
    setNewResource({
      resourceType: 'video',
      title: '',
      embedCode: '',
      provider: '',
      sourceUrl: ''
    });
  };

  // Filter resources by type
  const videoResources = resources.filter(r => r.resourceType === 'video');
  const gameResources = resources.filter(r => r.resourceType === 'game');
  const activityResources = resources.filter(r => r.resourceType === 'activity');
  const pdfResources = resources.filter(r => r.resourceType === 'pdf');

  // Get count of resources by category
  const getCategoryCount = (category: string) => {
    return resources.filter(r => r.resourceType === category).length;
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
      <div className="p-4 border-b bg-gray-50 flex items-center justify-between">
        <h2 className="text-xl font-semibold">Teacher Resources</h2>
        
        {isEditMode && !isAdding && (
          <Button 
            onClick={() => setIsAdding(true)}
            className="flex items-center"
          >
            <Plus className="mr-2 h-4 w-4" />
            Add Resource
          </Button>
        )}
      </div>
      
      {isAdding && (
        <div className="p-4 border-b bg-gray-50">
          <h3 className="text-lg font-medium mb-4">Add New Resource</h3>
          
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Resource Type</label>
                <select 
                  value={newResource.resourceType}
                  onChange={(e) => setNewResource({...newResource, resourceType: e.target.value as TeacherResource['resourceType']})}
                  className="w-full p-2 border rounded-md focus:ring-2 focus:ring-primary/30 focus:border-primary/70"
                >
                  <option value="video">Video</option>
                  <option value="game">Game</option>
                  <option value="activity">Activity / Lesson Plan</option>
                  <option value="pdf">PDF Document</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Title</label>
                <Input 
                  placeholder="Resource title"
                  value={newResource.title}
                  onChange={(e) => setNewResource({...newResource, title: e.target.value})}
                  className="w-full"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Provider (Optional)</label>
                <Input 
                  placeholder="e.g., YouTube, Wordwall, etc."
                  value={newResource.provider}
                  onChange={(e) => setNewResource({...newResource, provider: e.target.value})}
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">
                  {newResource.resourceType === 'pdf' ? 'PDF URL (Required)' : 'External URL (Optional)'}
                </label>
                <Input 
                  placeholder={newResource.resourceType === 'pdf' ? "URL to PDF file" : "https://example.com/resource"}
                  value={newResource.sourceUrl}
                  onChange={(e) => setNewResource({...newResource, sourceUrl: e.target.value})}
                  className="w-full"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">
                {newResource.resourceType === 'pdf' ? 'Description (Optional)' : 'Embed Code (Required)'}
              </label>
              <textarea 
                placeholder={
                  newResource.resourceType === 'pdf' 
                    ? 'Additional description for the PDF' 
                    : newResource.resourceType === 'activity'
                    ? 'HTML content for the activity or lesson plan'
                    : '<iframe src="..." width="..." height="..." frameborder="0" allowfullscreen></iframe>'
                }
                rows={5}
                value={newResource.embedCode}
                onChange={(e) => setNewResource({...newResource, embedCode: e.target.value})}
                className="w-full resize-y p-2 border rounded-md focus:ring-2 focus:ring-primary/30 focus:border-primary/70"
              />
            </div>
            
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={handleCancelAdd}>Cancel</Button>
              <Button onClick={handleAddResource}>Add Resource</Button>
            </div>
          </div>
        </div>
      )}
      
      {resources.length > 0 ? (
        <Tabs defaultValue="video" className="px-4">
          <div className="flex items-center justify-between mb-4">
            <TabsList className="grid grid-cols-4">
              <TabsTrigger value="video" className="flex items-center gap-1">
                <Video className="h-4 w-4 text-red-500" />
                <span>Videos</span>
                {getCategoryCount('video') > 0 && (
                  <span className="ml-1 px-1.5 py-0.5 text-xs font-medium bg-red-100 text-red-800 rounded-full">
                    {getCategoryCount('video')}
                  </span>
                )}
              </TabsTrigger>
              <TabsTrigger value="game" className="flex items-center gap-1">
                <Gamepad2 className="h-4 w-4 text-blue-500" />
                <span>Games</span>
                {getCategoryCount('game') > 0 && (
                  <span className="ml-1 px-1.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                    {getCategoryCount('game')}
                  </span>
                )}
              </TabsTrigger>
              <TabsTrigger value="activity" className="flex items-center gap-1">
                <BookOpen className="h-4 w-4 text-amber-500" />
                <span>Lessons</span>
                {getCategoryCount('activity') > 0 && (
                  <span className="ml-1 px-1.5 py-0.5 text-xs font-medium bg-amber-100 text-amber-800 rounded-full">
                    {getCategoryCount('activity')}
                  </span>
                )}
              </TabsTrigger>
              <TabsTrigger value="pdf" className="flex items-center gap-1">
                <FileText className="h-4 w-4 text-green-500" />
                <span>Lesson PDF</span>
                {getCategoryCount('pdf') > 0 && (
                  <span className="ml-1 px-1.5 py-0.5 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                    {getCategoryCount('pdf')}
                  </span>
                )}
              </TabsTrigger>
            </TabsList>
          
            <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    setNewResource({
                      bookId: bookId,
                      unitId: unitId,
                      title: "New Video",
                      resourceType: "video",
                      embedCode: "",
                      order: resources.length,
                      provider: "YouTube"
                    });
                    setIsAdding(true);
                  }}
                  className="flex items-center"
                >
                  <Video className="h-4 w-4 mr-1 text-red-500" />
                  Add Video
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    setNewResource({
                      bookId: bookId,
                      unitId: unitId,
                      title: "New Game",
                      resourceType: "game",
                      embedCode: "",
                      order: resources.length,
                      provider: "Wordwall"
                    });
                    setIsAdding(true);
                  }}
                  className="flex items-center"
                >
                  <Gamepad2 className="h-4 w-4 mr-1 text-blue-500" />
                  Add Game
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    setNewResource({
                      bookId: bookId,
                      unitId: unitId,
                      title: "New Lesson Plan",
                      resourceType: "activity",
                      embedCode: "",
                      order: resources.length,
                      provider: "Lesson Plan"
                    });
                    setIsAdding(true);
                  }}
                  className="flex items-center"
                >
                  <BookOpen className="h-4 w-4 mr-1 text-amber-500" />
                  Add Lesson Plan
                </Button>
              </div>
          </div>
          
          <TabsContent value="video" className="space-y-4">
            {videoResources.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {videoResources.map((resource, index) => (
                  <div key={resource.id || index} className="h-full flex flex-col">
                    <ResourceItem 
                      resource={resource}
                      index={index}
                      isEditing={editingResource === index}
                      isEditMode={isEditMode}
                      onEdit={() => setEditingResource(index)}
                      onCancelEdit={() => setEditingResource(null)}
                      onUpdate={() => handleUpdateResource(index)}
                      onDelete={() => handleDeleteResource(index)}
                      onChange={(field, value) => {
                        const updatedResources = [...resources];
                        updatedResources[index] = { 
                          ...updatedResources[index],
                          [field]: value
                        };
                        setResources(updatedResources);
                      }}
                    />
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                No video resources available.
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="game" className="space-y-4">
            {gameResources.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-stretch">
                {gameResources.map((resource, index) => (
                  <div key={resource.id || index} className="flex flex-col h-full">
                    <ResourceItem 
                      resource={resource}
                      index={index}
                      isEditing={editingResource === index}
                      isEditMode={isEditMode}
                      onEdit={() => setEditingResource(index)}
                      onCancelEdit={() => setEditingResource(null)}
                      onUpdate={() => handleUpdateResource(index)}
                      onDelete={() => handleDeleteResource(index)}
                      onChange={(field, value) => {
                        const updatedResources = [...resources];
                        const resourceIndex = resources.findIndex(r => r === resource);
                        updatedResources[resourceIndex] = { 
                          ...updatedResources[resourceIndex],
                          [field]: value
                        };
                        setResources(updatedResources);
                      }}
                    />
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                No game resources available.
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="activity" className="space-y-4">
            {activityResources.length > 0 ? (
              <div className="grid grid-cols-1 gap-6">
                {activityResources.map((resource, index) => (
                  <div key={resource.id || index} className="border rounded-lg overflow-hidden shadow-sm bg-white">
                    <div className="p-4 flex flex-wrap items-center justify-between gap-2 border-b bg-gray-50">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5 text-amber-500" />
                        <h3 className="text-lg font-semibold">{resource.title}</h3>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {resource.provider && (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {resource.provider}
                          </span>
                        )}
                        
                        {isEditMode && (
                          <>
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => setEditingResource(index)}
                              className="h-8 w-8 p-0 rounded-full hover:bg-gray-100"
                              title="Edit resource"
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => handleDeleteResource(index)}
                              className="h-8 w-8 p-0 rounded-full hover:bg-red-100 text-red-500"
                              title="Delete resource"
                            >
                              <Trash className="h-4 w-4" />
                            </Button>
                          </>
                        )}
                      </div>
                    </div>
                    
                    <div className="p-4">
                      {editingResource === index ? (
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium mb-1">Provider (Optional)</label>
                            <Input 
                              placeholder="e.g., Lesson Plan, Activity, etc."
                              value={resource.provider || ''}
                              onChange={(e) => {
                                const updatedResources = [...resources];
                                const resourceIndex = resources.findIndex(r => r === resource);
                                updatedResources[resourceIndex] = { 
                                  ...updatedResources[resourceIndex],
                                  provider: e.target.value
                                };
                                setResources(updatedResources);
                              }}
                              className="w-full"
                            />
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium mb-1">Title</label>
                            <Input 
                              placeholder="Resource title"
                              value={resource.title || ''}
                              onChange={(e) => {
                                const updatedResources = [...resources];
                                const resourceIndex = resources.findIndex(r => r === resource);
                                updatedResources[resourceIndex] = { 
                                  ...updatedResources[resourceIndex],
                                  title: e.target.value
                                };
                                setResources(updatedResources);
                              }}
                              className="w-full"
                            />
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium mb-1">Lesson Plan Content</label>
                            <textarea 
                              placeholder='Enter lesson plan content or HTML'
                              rows={15}
                              className="w-full resize-y p-2 border rounded-md focus:ring-2 focus:ring-primary/30 focus:border-primary/70"
                              value={resource.embedCode}
                              onChange={(e) => {
                                const updatedResources = [...resources];
                                const resourceIndex = resources.findIndex(r => r === resource);
                                updatedResources[resourceIndex] = { 
                                  ...updatedResources[resourceIndex],
                                  embedCode: e.target.value
                                };
                                setResources(updatedResources);
                              }}
                            />
                          </div>
                          
                          <div className="flex justify-end gap-2">
                            <Button 
                              variant="outline" 
                              onClick={() => setEditingResource(null)}>
                              Cancel
                            </Button>
                            <Button 
                              onClick={() => handleUpdateResource(index)}>
                              Save Changes
                            </Button>
                          </div>
                        </div>
                      ) : (
                        <div 
                          className="w-full rounded-lg overflow-auto p-4 max-w-full lesson-plan-container"
                          style={{ maxHeight: "800px", overflowY: "auto" }}
                          dangerouslySetInnerHTML={{ __html: resource.embedCode }}
                        />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                No lesson or activity resources available.
              </div>
            )}
          </TabsContent>
          
          <TabsContent value="pdf" className="space-y-4">
            {pdfResources.length > 0 ? (
              <div className="grid grid-cols-1 gap-6">
                {pdfResources.map((resource, index) => (
                  <div key={resource.id || index} className="border rounded-lg overflow-hidden shadow-sm bg-white">
                    <div className="p-4 flex flex-wrap items-center justify-between gap-2 border-b bg-gray-50">
                      <div className="flex items-center gap-2">
                        <FileText className="h-5 w-5 text-green-500" />
                        <h3 className="text-lg font-semibold">{resource.title}</h3>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {resource.sourceUrl && (
                          <a 
                            href={resource.sourceUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center px-2.5 py-1 border border-green-300 text-sm font-medium rounded-full shadow-sm text-green-700 bg-white hover:bg-green-50 transition-all"
                          >
                            <Download className="mr-1 h-4 w-4" />
                            Download PDF
                          </a>
                        )}
                        
                        {isEditMode && (
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => handleDeleteResource(index)}
                            className="h-8 w-8 p-0 rounded-full hover:bg-red-100 text-red-500"
                            title="Delete resource"
                          >
                            <Trash className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <div 
                        className="w-full overflow-hidden rounded-md" 
                        dangerouslySetInnerHTML={{ __html: resource.embedCode }}
                      />
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                {bookId === '1' && unitId === '1' ? (
                  <div className="flex flex-col items-center">
                    <p className="mb-4">Loading Lesson PDF...</p>
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                  </div>
                ) : (
                  <p>No PDF resources available for this unit.</p>
                )}
              </div>
            )}
          </TabsContent>
          
          {/* "Other" tab has been removed as requested */}
        </Tabs>
      ) : (
        <div className="p-8 text-center">
          <div className="text-gray-500 mb-4">No teaching resources available for this unit.</div>
          {isEditMode && (
            <Button 
              onClick={() => setIsAdding(true)}
              className="flex items-center"
            >
              <Plus className="mr-2 h-4 w-4" />
              Add Teaching Resource
            </Button>
          )}
        </div>
      )}
    </div>
  );
};

interface ResourceItemProps {
  resource: TeacherResource;
  index: number;
  isEditing: boolean;
  isEditMode: boolean;
  onEdit: () => void;
  onCancelEdit: () => void;
  onUpdate: () => void;
  onDelete: () => void;
  onChange: (field: string, value: string) => void;
}

const ResourceItem: React.FC<ResourceItemProps> = ({
  resource,
  index,
  isEditing,
  isEditMode,
  onEdit,
  onCancelEdit,
  onUpdate,
  onDelete,
  onChange
}) => {
  return (
    <div className="border rounded-lg overflow-hidden shadow-sm bg-white">
      {/* Resource header */}
      <div className="p-4 flex flex-wrap items-center justify-between gap-2 border-b bg-gray-50">
        <div className="flex items-center gap-2">
          {resource.resourceType === 'video' && <Video className="h-5 w-5 text-red-500" />}
          {resource.resourceType === 'game' && <Gamepad2 className="h-5 w-5 text-blue-500" />}
          {resource.resourceType === 'activity' && <BookOpen className="h-5 w-5 text-amber-500" />}
          {resource.resourceType === 'pdf' && <FileText className="h-5 w-5 text-green-500" />}
          {resource.resourceType === 'other' && <Link className="h-5 w-5 text-gray-500" />}
          
          {isEditing ? (
            <Input 
              value={resource.title}
              onChange={(e) => onChange('title', e.target.value)}
              className="w-full"
            />
          ) : (
            <h3 className="text-lg font-semibold">{resource.title}</h3>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {resource.provider && !isEditing && (
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
              {resource.provider}
            </span>
          )}
          
          {resource.sourceUrl && !isEditing && (
            <a 
              href={resource.sourceUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-50 text-blue-700 hover:bg-blue-100 transition-colors"
            >
              <ExternalLink className="mr-1 h-3 w-3" />
              Source
            </a>
          )}
          
          {isEditMode && !isEditing && (
            <>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={onEdit}
                className="h-8 w-8 p-0 rounded-full hover:bg-gray-100"
                title="Edit resource"
              >
                <Edit className="h-4 w-4" />
              </Button>
              
              <Button 
                variant="ghost" 
                size="sm"
                onClick={onDelete}
                className="h-8 w-8 p-0 rounded-full hover:bg-red-100 text-red-500"
                title="Delete resource"
              >
                <Trash className="h-4 w-4" />
              </Button>
            </>
          )}
          
          {isEditing && (
            <>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={onUpdate}
                className="h-8 w-8 p-0 rounded-full hover:bg-green-100 text-green-500"
                title="Save changes"
              >
                <Save className="h-4 w-4" />
              </Button>
              
              <Button 
                variant="ghost" 
                size="sm"
                onClick={onCancelEdit}
                className="h-8 w-8 p-0 rounded-full hover:bg-gray-100"
                title="Cancel editing"
              >
                <X className="h-4 w-4" />
              </Button>
            </>
          )}
        </div>
      </div>
      
      {/* Resource content */}
      <div className="p-4">
        {isEditing ? (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Provider (Optional)</label>
              <Input 
                placeholder="e.g., YouTube, Wordwall, etc."
                value={resource.provider || ''}
                onChange={(e) => onChange('provider', e.target.value)}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">External URL (Optional)</label>
              <Input 
                placeholder="https://example.com/resource"
                value={resource.sourceUrl || ''}
                onChange={(e) => onChange('sourceUrl', e.target.value)}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-1">Embed Code</label>
              <textarea 
                placeholder='<iframe src="..." width="..." height="..." frameborder="0" allowfullscreen></iframe>'
                rows={5}
                className="w-full resize-y p-2 border rounded-md focus:ring-2 focus:ring-primary/30 focus:border-primary/70"
                value={resource.embedCode}
                onChange={(e) => onChange('embedCode', e.target.value)}
              />
            </div>
          </div>
        ) : (
          <div 
            className="w-full rounded-lg overflow-hidden border bg-white shadow-sm aspect-video max-w-full"
            dangerouslySetInnerHTML={{ __html: resource.embedCode }}
          />
        )}
      </div>
    </div>
  );
};

export default TeacherResources;